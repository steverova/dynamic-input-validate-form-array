/* eslint-disable no-unused-vars */
import mock from './mock.json';
import { useEffect, useState } from 'react';
import {
  Box,
  Button,
  Container,
  Divider,
  IconButton,
  TextField,
} from '@mui/material';
import { useForm, Controller, useFieldArray } from 'react-hook-form';
import { yupResolver } from '@hookform/resolvers/yup'; // Importa yupResolver
import * as yup from 'yup';
import DeleteIcon from '@mui/icons-material/Delete';
import ExpandLessIcon from '@mui/icons-material/ExpandLess';
import ExpandMoreIcon from '@mui/icons-material/ExpandMore';
import AddIcon from '@mui/icons-material/Add';
import CloudUploadIcon from '@mui/icons-material/CloudUpload';
import RestartAltIcon from '@mui/icons-material/RestartAlt';
import uuid from 'react-uuid';

const defaultEntry = () => {
  return {
    id: uuid(),
    description: '',
    average: '',
    quantity: '',
    subEntries: [defaultSubEntry()],
  };
};

const defaultSubEntry = () => {
  return {
    id: uuid(),
    description: '',
    average: '',
    score: '',
    date: '',
  };
};

function App() {
  const [expandedSections, setExpandedSections] = useState({});

  const schema = yup.object().shape({
    entries: yup.array().of(
      yup.object().shape({
        description: yup.string().required('description es requerido'),
        average: yup.string().required('average es requerido'),
        quantity: yup.string().required('quantity es requerido'),
        subEntries: yup.array().of(
          yup.object().shape({
            description: yup.string().required('evaluation description requerido '),
            average: yup.string().required('evaluation avarage es requerido '),
            score: yup.string().required('score es requerido'),
            date: yup.string().required('date es requerido'),
          })
        ),
      })
    ),
  });

  const toggleSection = (id) => {
    setExpandedSections({ ...expandedSections, [id]: !expandedSections[id] });
  };

  const {
    control,
    handleSubmit,
    formState: { errors },
    setValue,
    getValues,
  } = useForm({
    mode: 'onChange',
    resolver: yupResolver(schema),
    defaultValues: {
      entries: [],
    },
  });

  const { fields, append, remove } = useFieldArray({
    control,
    name: 'entries',
  });

  const addEntry = () => {
    const newEntry = defaultEntry();
    if (fields) console.log(fields);
    append(newEntry);
  };

  const removeEntry = (index) => {
    remove(index);
  };

  const addSubEntry = (entryIndex) => {
    const newSubEntry = defaultSubEntry();
    const currentEntries = getValues('entries');
    currentEntries[entryIndex].subEntries.push(newSubEntry);

    // Hacer una copia del estado actual de expandedSections
    const newExpandedSections = { ...expandedSections };

    // Actualizar el formulario con las nuevas subentradas
    setValue('entries', currentEntries);

    // Mantener abierto el estado de la nueva subentrada
    newExpandedSections[newSubEntry.id] = true;
    setExpandedSections(newExpandedSections);
  };

  const removeSubEntry = (entryIndex, subEntryIndex) => {
    const currentEntries = getValues('entries');
    const removedSubEntry = currentEntries[entryIndex].subEntries.splice(
      subEntryIndex,
      1
    );
    // Elimina el estado solo de la subentrada que se eliminó
    const newExpandedSections = { ...expandedSections };
    setValue('entries', currentEntries);
    delete newExpandedSections[removedSubEntry[0].id];
    setExpandedSections(newExpandedSections);
  };

  const onSubmit = async (data) => {
    console.log(data.entries);
    // Realiza el envío de datos o cualquier otra lógica aquí
  };

  useEffect(() => {
    console.log(fields);
  }, [fields]);

  return (
    <Container className="py-8" maxWidth="lg">
      <form onSubmit={handleSubmit(onSubmit)}>
        <Box className="gap-4 mt-1">
          {fields.map((entries, index) => (
            <Box
              key={entries.id}
              className="bg-white rounded-lg shadow-md border-solid border-2 border-slate-100 p-4 flex flex-col w-full mb-3">
              <Box className="flex flex-row">
                <Controller
                  name={`entries[${index}].description`}
                  control={control}
                  defaultValue={entries.description}
                  render={({ field }) => (
                    <TextField
                      {...field}
                      size="small"
                      placeholder="description"
                      variant="outlined"
                      className="w-full mb-2 px-2"
                      style={{ padding: '4px' }}
                      error={!!errors.entries?.[index]?.description}
                      helperText={errors.entries?.[index]?.description?.message}
                    />
                  )}
                />

                <Controller
                  name={`entries[${index}].average`}
                  control={control}
                  defaultValue={entries.average}
                  render={({ field }) => (
                    <TextField
                      {...field}
                      size="small"
                      placeholder="average"
                      variant="outlined"
                      className="w-full mb-2 px-2"
                      style={{ padding: '4px' }}
                      error={!!errors.entries?.[index]?.average}
                      helperText={errors.entries?.[index]?.average?.message}
                    />
                  )}
                />

                <Controller
                  name={`entries[${index}].quantity`}
                  control={control}
                  defaultValue={entries.quantity}
                  render={({ field }) => (
                    <TextField
                      {...field}
                      size="small"
                      placeholder="quantity"
                      variant="outlined"
                      className="w-full mb-2 px-2"
                      style={{ padding: '4px' }}
                      error={!!errors.entries?.[index]?.quantity}
                      helperText={errors.entries?.[index]?.quantity?.message}
                    />
                  )}
                />

                <Box className="flex justify-center items-center px-1">
                  <IconButton
                    sx={{
                      backgroundColor: '#f2f2f2',
                      boxShadow:
                        'rgba(9, 30, 66, 0.25) 0px 1px 1px, rgba(9, 30, 66, 0.13) 0px 0px 1px 1px;',
                      '&:hover': {
                        backgroundColor: '#e6f2ff',
                      },
                    }}
                    color="info"
                    onClick={() => toggleSection(entries.id)}
                    aria-label="expand">
                    {expandedSections[entries.id] ? (
                      <ExpandLessIcon />
                    ) : (
                      <ExpandMoreIcon />
                    )}
                  </IconButton>
                </Box>

                <Box className="flex justify-center items-center px-1">
                  <IconButton
                    sx={{
                      backgroundColor: '#f2f2f2',
                      boxShadow:
                        'rgba(9, 30, 66, 0.25) 0px 1px 1px, rgba(9, 30, 66, 0.13) 0px 0px 1px 1px;',
                      '&:hover': {
                        backgroundColor: '#ffe6e6',
                      },
                    }}
                    onClick={() => removeEntry(index)}
                    color="error"
                    aria-label="delete">
                    <DeleteIcon />
                  </IconButton>
                </Box>
              </Box>

              {expandedSections[entries.id] && (
                <Box>
                  {entries.subEntries &&
                    entries.subEntries.map((subEntry, subIndex) => (
                      <Container key={subEntry.id} className="">
                        <Box
                          className="flex flex-row  p-1 mt-2"
                          key={subEntry.id}>
                          <Controller
                            name={`entries[${index}].subEntries[${subIndex}].description`}
                            control={control}
                            defaultValue={subEntry.description}
                            render={({ field }) => (
                              <TextField
                                {...field}
                                size="small"
                                placeholder="description"
                                variant="outlined"
                                className="w-full mb-2 px-2"
                                style={{ padding: '4px' }}
                                error={
                                  !!errors.entries?.[index]?.subEntries?.[
                                    subIndex
                                  ]?.description
                                }
                                helperText={
                                  errors.entries?.[index]?.subEntries?.[
                                    subIndex
                                  ]?.description?.message
                                }
                              />
                            )}
                          />

                          <Controller
                            name={`entries[${index}].subEntries[${subIndex}].average`}
                            control={control}
                            defaultValue={subEntry.average}
                            render={({ field }) => (
                              <TextField
                                {...field}
                                size="small"
                                placeholder="average"
                                variant="outlined"
                                className="w-full mb-2 px-2"
                                style={{ padding: '4px' }}
                                error={
                                  !!errors.entries?.[index]?.subEntries?.[
                                    subIndex
                                  ]?.average
                                }
                                helperText={
                                  errors.entries?.[index]?.subEntries?.[
                                    subIndex
                                  ]?.average?.message
                                }
                              />
                            )}
                          />

                          <Controller
                            name={`entries[${index}].subEntries[${subIndex}].score`}
                            control={control}
                            defaultValue={subEntry.score}
                            render={({ field }) => (
                              <TextField
                                {...field}
                                size="small"
                                placeholder="score"
                                variant="outlined"
                                className="w-full mb-2 px-2"
                                style={{ padding: '4px' }}
                                error={
                                  !!errors.entries?.[index]?.subEntries?.[
                                    subIndex
                                  ]?.score
                                }
                                helperText={
                                  errors.entries?.[index]?.subEntries?.[
                                    subIndex
                                  ]?.score?.message
                                }
                              />
                            )}
                          />

                          <Controller
                            name={`entries[${index}].subEntries[${subIndex}].date`}
                            control={control}
                            defaultValue={subEntry.date}
                            render={({ field }) => (
                              <TextField
                                {...field}
                                size="small"
                                placeholder="date"
                                variant="outlined"
                                className="w-full mb-2 px-2"
                                style={{ padding: '4px' }}
                                error={
                                  !!errors.entries?.[index]?.subEntries?.[
                                    subIndex
                                  ]?.date
                                }
                                helperText={
                                  errors.entries?.[index]?.subEntries?.[
                                    subIndex
                                  ]?.date?.message
                                }
                              />
                            )}
                          />

                          <Box className="flex justify-center items-center px-1">
                            <IconButton
                              sx={{
                                backgroundColor: '#f2f2f2',
                                boxShadow:
                                  'rgba(9, 30, 66, 0.25) 0px 1px 1px, rgba(9, 30, 66, 0.13) 0px 0px 1px 1px;',
                                '&:hover': {
                                  backgroundColor: '#ffe6e6',
                                },
                              }}
                              size="small"
                              onClick={() => removeSubEntry(index)}
                              color="error"
                              aria-label="delete">
                              <DeleteIcon size="small" />
                            </IconButton>
                          </Box>
                        </Box>
                      </Container>
                    ))}
                  <Container>
                    <Button
                      style={{ marginLeft: '9px' }}
                      variant="outlined"
                      color="primary"
                      startIcon={<AddIcon />}
                      onClick={() => addSubEntry(index)}>
                      Agregar Subentrada
                    </Button>
                  </Container>
                </Box>
              )}
            </Box>
          ))}

          <Button
            style={{ marginTop: '0px' }}
            variant="outlined"
            color="primary"
            startIcon={<AddIcon />}
            onClick={addEntry}>
            Nueva entrada
          </Button>

          <Divider sx={{ marginTop: '20px', marginBottom: '20px' }} />

          <Button
            sx={{ marginRight: '10px' }}
            type="submit"
            variant="contained"
            startIcon={<CloudUploadIcon />}>
            Enviar
          </Button>
          <Button
            type="button"
            variant="outlined"
            startIcon={<RestartAltIcon />}>
            Reiniciar
          </Button>
        </Box>
      </form>
    </Container>
  );
}

export default App;
